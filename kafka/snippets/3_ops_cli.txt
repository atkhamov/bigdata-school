https://kafka.apache.org/documentation/#configuration

####
## kafka-topics | Manage topics
####

# List topics
kafka-topics.sh --bootstrap-server localhost:9092 --list

# Create topic
kafka-topics.sh --bootstrap-server localhost:9092 --create --topic test_01 --partitions 3 --replication-factor 1

# Error: RF larger than available brokers
kafka-topics.sh --bootstrap-server localhost:9092 --create --topic test_01 --partitions 3 --replication-factor 2

# Topic info
kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic test_01

# Delete topic
kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic test_01

# Option delete.topic.enable=false



####
## kafka-console-producer | send data to kafka
####

# Send some messages
kafka-console-producer.sh --broker-list localhost:9092 --topic test_01

kafka-console-producer.sh --broker-list localhost:9092 --topic test_01 --producer-property acks=all

# Send message to nonexistent topic
kafka-console-producer.sh --broker-list localhost:9092 --topic test_02 --producer-property acks=all

# Check auto created topic configuration
kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic test_02

# Change default properties server.properties
default.replication.factor
num.partitions

# Restart kafka and create new topic with new defaults

# Disable topic auto creation
auto.create.topics.enable



####
## kafka-console-consumer | read data from kafka
####

# read from current offset
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_01
## send some messages from console producer

# read from earliest offset
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_01 --from-beginning

# start 3 consumers with common group
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_01 --group test_consumer_01
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_01 --group test_consumer_01
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_01 --group test_consumer_01

# shutdown consumers secuentially and send messages

# send messages with/without key (sharding/lb)
kafka-console-producer.sh --broker-list localhost:9092 --topic test_01
kafka-console-producer.sh --broker-list localhost:9092 --topic test_01 --property "parse.key=true" --property "key.separator=:"


####
## kafka-console-groups | Offsets, lag, consumer-id etc.
####
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group test_consumer_01

# Consmers are turned off, describe group test_consumer_01
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group test_consumer_01

# Start first consumer and describe again
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_01 --group test_consumer_01
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group test_consumer_01

# Start second and so on
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_01 --group test_consumer_01
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group test_consumer_01

# Shutdown consumers and send messages to demonstrate offset lag

# Reset Offsets
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group test_consumer_01 --topic test_01 --reset-offsets --to-earliest --execute
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group test_consumer_01 --topic test_01 --reset-offsets --shift-by -3 --execute
